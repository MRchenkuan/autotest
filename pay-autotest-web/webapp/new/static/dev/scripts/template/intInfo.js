/** * Created by marszed on 16/3/8. */define(function (require, exports, module) {    var template = require('template'),        $ = require('jquery'),        layer = require('layer'),        global = require('global'),        GiGoldTool = new global.GiGoldTool(),        common = require('common'),        GiGoldPay = new common.GiGoldPay(),        $slider = $('#slider'),        getConstFields = [],//缓存数据源信息!!!        cacheDetail = [];    var getInserCharLock = false,//占位符锁        useInterfaceLock = false,//请求左侧菜单栏接口信息锁        useCaseLock = false,//测试用例锁        moduleNameLock = false,//依赖名锁        sendCaseLock = false,//新增用例锁        caseDataLock = false,//获取用例锁        callBackModuleLock = false,//面板切换        deleteCaseLock = false,//删除用例锁        interfaceInfoLock = false,//接口基本信息锁        resCodeLock = false,//响应吗获取锁        updateResCodeLock = false,//更新用例响应码        moduleLock = false;//报文依赖锁    var interfaceDataCache = [];//接口信息缓存    // 依赖关系渲染方法    function rendReferGraph(selector,mockReferList ,relayOn,crtMockId,crtText,crtTips){    var dates = [];            var links = [];            var exitsIds = [];            var referBranchY = 400;            var referBranchX = 140;            /**             * 依赖的接口             */            if(mockReferList.some)                mockReferList.some(function(it,id,ar){                    if(exitsIds.indexOf(it.refMockId)<0){                        var ele = {                            id : it.refMockId,                            name:it.refMockId+it.ifName,                            category: 0,// 分类                            symbolSize:30,// 圈圈大小                            y : referBranchY,                            x : referBranchX + id*140,                            label: {                                normal: {                                    show: true,                                    position:id%2==0?"top":"bottom"                                }                            },                            tooltip:{                                formatter:it.refMockId+"-"+it.caseName                            }                        };                        dates.push(ele);                        exitsIds.push(it.refMockId);                    }else{                        console.log("ele repeat");                    }                    var lk = {                        source:it.refMockId.toString(),                        target:it.mockId.toString(),                        tooltip:{                            formatter:it.refMockId +" < "+it.mockId                        }                    };                    links.push(lk);                });            /**             * 当前接口             * @type {{id: *, name: *, category: number, symbolSize: number, y: number, x: number, label: {normal: {show: boolean, position: string}}, tooltip: {formatter: *}}}             */            var currentNode = {                id : crtMockId,                name:crtText,                category: 1,// 分类                symbolSize:60,// 圈圈大小                y : referBranchY,                x : referBranchX + dates.length*140,                label: {                    normal: {                        show: true,                        position:dates.length%2==0?"top":"bottom"                    }                },                tooltip:{                    formatter:crtTips                }            };            dates.push(currentNode);            /**             * 重新布局依赖元素----             * 二叉链表的先序遍历              */            (function(){                try{                    var fullTree = {};                    // 遍历子父树                    mockReferList.some(function(it){                        var nodeId = it.refMockId;                        var parent = it.mockId;                        if(!fullTree[nodeId])fullTree[nodeId] = {};                        if(!fullTree[nodeId].parents)fullTree[nodeId].parents = [];                        fullTree[nodeId].parents.push(parent)                    });                    // 遍历子树                    mockReferList.some(function(it){                        var child = it.refMockId;                        var nodeId = it.mockId;                        if(!fullTree[nodeId])fullTree[nodeId] = {};                        if(!fullTree[nodeId].children)fullTree[nodeId].children = [];                        fullTree[nodeId].children.push(child)                    });                    // 遍历初始节点                    var ends = [];                    for(var nodeId in fullTree){                        if(fullTree.hasOwnProperty(nodeId)){                            var node = fullTree[nodeId];                            if(!node.parents)ends.push(nodeId);                            //if(!node.children)starts.push(nodeId);                        }                    }                    // 根据初始节点 ends 先序遍历整棵树                    var maxLine=0;                    moveChildNode(ends,0,0);                    // 元素重新排序                    dates.some(function(ele){                        var nodeId = ele.id;                        var eleX = -fullTree[nodeId].x;                        var eleY = fullTree[nodeId].y;                        ele.x = 100 * eleX;                        ele.y = 120 * eleY;                    });                    // 移动当前节点到居中位置                    currentNode.y = 120 * (maxLine-1)/2;                    // 遍历方法                    function moveChildNode(ends,x,y){                        ends.some(function (nodeId,lineNo) {                            var node = fullTree[nodeId];                            node.x = x;                            node.y = y+lineNo;                            var children = node.children;                            if(children){                                moveChildNode(children,x+1,y+lineNo);                            }                            // 累计最大行数                            maxLine = Math.max(ends.length,maxLine);                        });                    }                }catch (e){                    console.log("元素重拍时出现异常")                    console.log(e);                }            })();            /**             * -----重新布局依赖元素             */            /**             * 被依赖的接口             */            if(relayOn.some)                relayOn.some(function(it,id,ar){                    var circleO = {                        x:currentNode.x,                        y:currentNode.y                    };                    var circleR = 180;                    var radians = (Math.PI / 180) * Math.round(180 / (ar.length+1)); // 等分圆弧度                    var x = circleO.x+circleR*Math.sin(radians * id+(3.14-radians)/ar.length);                    var y = circleO.y+circleR*Math.cos(radians * id+(3.14-radians)/ar.length);                    var ele = {                        id :it.mockId,                        category:2,// 分类                        symbolSize:30,// 圈圈大小                        name:it.mockId +" "+ it.caseName,                        x : x,                        y : y,                        label: {                            normal: {                                show: true,                                position:"right",                            }                        },                        tooltip:{                            formatter:it.mockId +"-"+it.caseName                        }                    };                    dates.push(ele);                    exitsIds.push(it.mockId);                    var lk = {                        source:it.refMockId.toString(),                        target:it.mockId.toString(),                        lineStyle: {                            normal: { curveness: 0 }                        },                        tooltip:{                            formatter:it.refMockId +" < "+it.mockId                        }                    };                    links.push(lk);                });            /**             * 开始绘图             * @type {string[]}             */            var categories = ["依赖","当前接口","被依赖"];            // 基于准备好的dom，初始化echarts实例            var myChart = echarts.init(document.querySelector(selector));            var option = {                title: {                    text: '依赖关系图'                },                tooltip: {},                animationDurationUpdate: 1500,                animationEasingUpdate: 'quinticInOut',                series : [                    {                        type: 'graph',                        layout: 'none',                        symbolSize: 50,                        categories: categories,                        roam: true,                        label: {                            normal: {                                show: true,                                position:"top"                            }                        },                        edgeSymbol: ['circle', 'arrow'],                        edgeSymbolSize: [4, 10],                        edgeLabel: {                            normal: {                                textStyle: {                                    fontSize: 20                                }                            }                        },                        data: dates,                        links: links,                        lineStyle: {                            normal: {                                opacity: 0.9,                                width: 1,                                curveness:0                            }                        }                    }                ]            };            // 使用刚指定的配置项和数据显示图表。            myChart.setOption(option);    };    //左侧菜单栏伸缩交互    $slider.on('click', '#openShrink', function () {        $(this).toggleClass('menuExpand');        $slider.toggleClass('sliderLf');        $('#useCaseDetail').toggleClass('ml80');    });    //上一页,下一页    $slider.on('click', '.prePage, .nextPage', function () {        var page = $(this).attr('page');        GiGoldTool.cookie('pagenum', page, {expires: 365});        sliderInterface.updateInterfaceByPage(page);    });    //点击接口名,展开测试用例    $slider.on('click', '.interfaceMsg:not()', function () {        var $this = $(this);        $this.next('.ct-box').toggleClass('ht-auto').parents('.interfaceChild').siblings().find('.ct-box').removeClass('ht-auto');        var interfaceId = $this.find('.id').html() - 0;        $('.ct-box').find('p').removeClass('ct-active');        if (interfaceId) {            $('#addUsecase').attr('ifId', interfaceId);            //清除请求参数,接口依赖,报文依赖            sliderInterface.cleanCaseDome();            //读取缓存接口信息            getCacheData(interfaceId);        }    });    //测试用例选择,加载相应用例详情模版(请求响应模块+报文依赖)    $slider.on('click', '.interfaceChild > .ct-box > p', function () {        var $this = $(this),            caseId = $this.attr('caseid') - 0,            interfaceId = $this.attr('interfaceid') - 0;        $("#descInput").attr("data-mockid",caseId);        if ($this.hasClass('del-case')) {            return false;        }        $(this).addClass('ct-active').siblings('p').removeClass('ct-active');        if (caseId) {            $('#addRelateModule').attr('mockid', caseId);            sliderInterface.getCaseData({                data: {                    id: caseId + '',                    interfaceId:interfaceId + ''                }            });        }    });    //测试用例跳转,加载相应用例详情模版(请求响应模块+报文依赖)    $('#bdLeft').on('click', '#interfaceModuleCt > tr > td > .go-to', function () {        var $this = $(this),            caseId = $this.attr('refMockId') - 0;        gotoCase(caseId)    });    // 测试用例跳转方法    function gotoCase(caseId){        if (caseId) {            $('#addRelateModule').attr('mockid', caseId);            sliderInterface.getCaseData({                data: {                    id: caseId + ''                }            });        } else {            layer.tips('缺少用例id', $this);        }    }    //添加用例    $slider.on('click', '.add-case', function (e) {        var $this = $(this),            ifId = $this.parents('.interfaceChild').attr("ifid");        if (ifId) {            sliderInterface.getResCode(ifId);        } else {            layer.tips('缺少接口id', $this);        }        e.stopPropagation();    });    //切换测试状态    $slider.on('click', '.switch-test', function (e) {        var $this = $(this);        var $autoFlag = $this.prevAll('.msg').find(".ignore-flag");        var ifId = $this.parents('.interfaceChild').attr("ifid");        sliderInterface.switchTestFlag(ifId,$autoFlag);        e.stopPropagation();    });    //删除用例    $slider.on('click', '.del-case', function (e) {        var caseid = $(this).parent('p').attr('caseid'),            $this = $(this);        if (caseid) {            layer.confirm('确认删除' + caseid + '用例?', {                title: '删除提示',                btn: ['确定', '取消'] //按钮            }, function () {                sliderInterface.deleteUseCase({                    data: {                        id: caseid + ''                    }                });            }, function () {                //用户取消删除用例操作            });        } else {            layer.tips('缺少用例id');        }        e.stopPropagation();    });    //保存新增用例,入参,出参默认为空对象    $(document).on('click', '#saveCase', function () {        var resCode = $('#newCaseList').find('span').attr('rspcodeid'),            val = $('#newCaseList').find('input').val(),            ifId = $(this).attr('ifId');        if (resCode && val && ifId) {            sliderInterface.sendUseCase({                caseName: val + "",                checkJson: "",                id: "",                ifId: ifId + "",                requestJson: "{}",                responseJson: "{}",                rspCodeId: resCode + "",                rspRefJson: ""            }, 'add');        } else {            layer.msg('缺少新增用例信息!!!');        }    });    //修改用例    $slider.on('click', '.update-case', function (e) {        var $this = $(this),            caseid = $this.parent('p').attr('caseid'),            ifid = $this.parent('p').attr('interfaceid');        if (caseid && ifid) {            if (!updateResCodeLock) {                updateResCodeLock = true;                GiGoldPay.ajaxHandler({                    "url": GiGoldPay.ipBullShit() + "/autotest/getrspcdbyifid.do",                    "data": {                        'ifId': ifid + ''                    },                    "onSuccess": function (data) {                        if (data.rspCd == "00000") {                            updateResCodeLock = false;                            sliderInterface.getCaseData({                                data: {                                    id: caseid + '',                                    type: 'update',                                    respondCode: data.list                                }                            });                        } else {                            GiGoldPay.cancleLock(updateResCodeLock);                        }                    },                    'onError': function (data) {                        GiGoldPay.cancleLock(updateResCodeLock);                    }                });            }        } else {            layer.tips('缺少用例id,或者接口id');        }        e.stopPropagation();    });    //修改保存用例    $(document).on('click', '#updateCaseSave', function () {        var resCode = $('#updateCaseBox').find('span').attr('rspcodeid'),//响应码id            val = $('#updateCaseBox').find('input').val(),//用例名            ifId = $(this).attr('ifId'),//接口id            caseId = $(this).attr('caseId');//接口        if (resCode && val && ifId && caseId) {            sliderInterface.sendUseCase({                caseName: val + "",                id: caseId + "",                ifId: ifId + "",                rspCodeId: resCode + "",            }, 'update');        } else {            layer.msg('缺少必要信息');        }    });    //选择新增信息响应码    $(document).on('click', '.newCaseSelect > li > a', function () {        var $this = $(this),            rspcodeid = $this.attr('rspcodeid') - 0;        if (rspcodeid) {            $('#newCaseList').find('.newCaseChoose').html($this.html() + '&nbsp;<span class="caret" rspcodeid=' + rspcodeid + '></span>');        }    });    //选择修改信息响应码    $(document).on('click', '.chooseUpdateCodeList > li > a', function () {        var $this = $(this),            rspcodeid = $this.attr('rspcodeid') - 0;        if (rspcodeid) {            $('#updateCaseBox').find('.chooseUpdateCode').html($this.html() + '&nbsp;<span class="caret" rspcodeid=' + rspcodeid + '></span>');        }    });    //选择修改信息响应码    $(document).on('click', '.declareObj > li > a', function () {        var $this = $(this),            rspcodeid = $this.attr('rspcodeid') - 0;    });    //清除原有接口测试用例相关信息    intInfoInit.prototype.cleanCaseDome = function () {        $('#interfaceModuleCt, #require, #response, #msgModule,#useCaseList').empty();    };    //读取缓存接口数据    function getCacheData(interfaceId) {        var cacheData = {};        //优先读取缓存的接口基本信息        for (var i = 0, len = interfaceDataCache.length; i < len; i++) {            var temp = interfaceDataCache[i].list;            if (temp.length > 0) {                for (var j = 0, _len = temp.length; j < _len; j++) {                    if (temp[j].id == interfaceId) {                        cacheData = temp[j];                        break;                    }                }            }        }        renderBaseInterfaceAndRes(cacheData);        //缓存数据源信息        if (getConstFields.length <= 0) {            sliderInterface.getInsertChar();        }    }    function intInfoInit() {    }    //获取接口列表信息,页码信息,测试用例信息    intInfoInit.prototype.updateInterface = function (obj) {        if (!useInterfaceLock) {            $slider.addClass('loading');            useInterfaceLock = true;            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit() + "/autotest/getallifsys.do",                "data": obj.data || {pageNum: 1},                "onSuccess": function (data) {                    if (data.rspCd == "00000") {                        useInterfaceLock = false;                        $slider.removeClass('loading');                        interfaceDataCache.push(data.pageInfo);                        renderByJson(data.pageInfo);                    } else {                        GiGoldPay.cancleLock(useInterfaceLock);                    }                },                'onError': function (data) {                    GiGoldPay.cancleLock(useInterfaceLock);                }            });        }    };    //新增用例信息    intInfoInit.prototype.sendUseCase = function (obj, type) {        if (!sendCaseLock) {            sendCaseLock = true;            GiGoldPay.ajaxHandler({                "url": GiGoldPay.ipBullShit() + "/autotest/updateifsysmock.do",                "data": obj,                "onSuccess": function (_data) {                    if (_data.rspCd == "00000") {                        sendCaseLock = false;                        $('.layui-layer-shade').click();                        layer.msg('保存新增用例信息成功');                        //填充新增数据                        for (var i = 0, len = interfaceDataCache.length; i < len; i++) {                            var temp = interfaceDataCache[i].list;                            if (temp.length > 0) {                                for (var j = 0, _len = temp.length; j < _len; j++) {                                    if (temp[j].id == obj.ifId) {                                        temp[j].mockList.push(_data.ifSysMock);                                        break;                                    }                                }                            }                        }                        //清空用例信息填写文本区域                        $('#newCaseList').empty();                        //复原新增测试用例状态                        var html = '<p interfaceid=' + _data.ifSysMock.ifId + ' caseid=' + _data.ifSysMock.id + ' title=' + _data.ifSysMock.caseName + '>' +                            '<span class="text-danger">' + _data.ifSysMock.id + '</span><label>' + _data.ifSysMock.caseName + '</label><i class="update-case iconfont">&#xe658;</i><i class="del-case iconfont">&#xe657;</i></p>';                        var $li = $('#interfaceInfo').find('.interfaceChild');                        if (type == 'add') {                            for (var i = 0, len = $li.length; i < len; i++) {                                var $temp = $($li[i]);                                if ($temp.attr('ifId') == obj.ifId) {                                    $temp.find('.ct-box').append(html);                                    $temp.find('.ct-box > p:last-child').click();                                    break;                                }                            }                        }                        if (type == 'update') {                            for (var i = 0, len = $li.length; i < len; i++) {                                var $temp = $($li[i]);                                if ($temp.attr('ifId') == obj.ifId) {                                    $temp.find('.ct-box > p:last-child').html(html).click();                                    break;                                }                            }                        }                    } else {                        layer.msg('保存新增用例信息失败');                        GiGoldPay.cancleLock(sendCaseLock);                    }                },                "onError": function (data) {                    layer.msg('保存新增用例信息失败');                    GiGoldPay.cancleLock(sendCaseLock);                }            });        }    };    // 切换自动测试/手动测试    intInfoInit.prototype.switchTestFlag = function (ifId,$autoFlag) {        GiGoldPay.ajaxHandler({            "url": GiGoldPay.ipBullShit() + "/autotest/switchAutoTest.do",            "data": {                'ifId': ifId >> 0            },            "onSuccess": function (_data) {                if (_data.rspCd == "00000") {                    var tag = _data.isAutoTest;                    $autoFlag.attr("style","display:"+(tag=="Y"?"none":"auto"))                } else {                    // todo something                }            },            "onError": function (data) {                // todo something            }        });    }    //点击接口,获取响应吗信息    intInfoInit.prototype.getResCode = function (obj) {        if (!resCodeLock) {            resCodeLock = true;            GiGoldPay.ajaxHandler({                "url": GiGoldPay.ipBullShit() + "/autotest/getrspcdbyifid.do",                "data": {                    'ifId': obj + ''                },                "onSuccess": function (_data) {                    if (_data.rspCd == "00000") {                        //开始进入添加用例信息状态清空其他信息                        $('#require, #response, #msgModule,#useCaseList,#interfaceModuleCt').empty();                        var str = '<div id="newCaseList"><div class="form-group" style="margin: 20px 10px 15px;">' +                            '<input type="text" class="form-control" placeholder="请输入用例名">' +                            '</div>' +                            '<div class="btn-group"  style="margin-left: 10px;">' +                            '<button type="button" class="btn btn-default dropdown-toggle newCaseChoose"' +                            'data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">请选择响应码&nbsp;<span' +                            'class="caret"></span></button>' +                            '<ul class="dropdown-menu newCaseSelect">' +                            '{{ each list as temp i}}' +                            '<li><a href="javascript:;" rspCodeId="{{temp.id}}">{{temp.rspCode}}&nbsp;&nbsp;{{temp.rspCodeDesc}}</a></li>' +                            '{{/each}}' +                            '</ul>' +                            '<button id="saveCase" type="button" ifId=' + obj + ' class="open-box active btn btn-success" style="margin-left: 10px;">保存</button>' +                            '</div></div>';                        var render = template.compile(str);                        var html = render(_data);                        layer.open({                            type: 1,                            title: '新增用例信息',                            closeBtn: 1, //不显示关闭按钮                            shift: 2,                            area: ['400px', '300px'],                            shadeClose: true, //开启遮罩关闭                            content: html                        });                        resCodeLock = false;                    } else {                        GiGoldPay.cancleLock(resCodeLock);                    }                },                "onError": function (data) {                    GiGoldPay.cancleLock(resCodeLock);                }            });        }    };    //删除用例信息    intInfoInit.prototype.deleteUseCase = function (obj) {        if (!deleteCaseLock) {            deleteCaseLock = true;            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit() + "/autotest/deleteifsysmockbyid.do",                "data": obj.data || {},                "onSuccess": function (data) {                    if (data.rspCd == "00000") {                        deleteCaseLock = false;                        obj.data.that.parent().remove();                        //清除请求参数,接口依赖,报文依赖                        sliderInterface.cleanCaseDome();                        layer.msg('删除用例成功!');                    } else {                        GiGoldPay.cancleLock(deleteCaseLock);                        layer.msg('删除用例失败!');                    }                },                'onError': function (data) {                    GiGoldPay.cancleLock(deleteCaseLock);                    layer.msg('删除用例出错!');                }            });        }    };    //获取接口基本信息 invalid    intInfoInit.prototype.getInterfaceInfo = function (obj) {        if (!interfaceInfoLock) {            interfaceInfoLock = true;            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit() + "/autotest/queryInterFaceById.do",                "data": obj.data || {},                "onSuccess": function (data) {                    if (data.rspCd == "00000") {                        interfaceInfoLock = false;                        renderBaseInterfaceAndRes(data);                        //将接口基本信息缓存                        for (var i = 0, len = interfaceDataCache.length; i < len; i++) {                            var temp = interfaceDataCache[i].list;                            for (var j = 0, _len = temp.length; j < _len; j++) {                                if (temp[j].id == data.interFaceInfo.id) {                                    temp[j].interFaceInfo = data.interFaceInfo;                                    temp[j].returnCodeList = data.returnCodeList;                                    break;                                }                            }                        }                    } else {                        GiGoldPay.cancleLock(interfaceInfoLock);                    }                },                'onError': function (data) {                    GiGoldPay.cancleLock(interfaceInfoLock);                }            });        }    };    //数据源信息永久缓存    intInfoInit.prototype.getInsertChar = function () {        if (!getInserCharLock) {            getInserCharLock = true;            GiGoldPay.ajaxHandler({                "url": GiGoldPay.ipBullShit() + "/autotest/getConstFields.do",                "data": {},                "onSuccess": function (_data) {                    if (_data.rspCd == "00000") {                        getConstFields = _data.dataes;                        getInserCharLock = false;                    } else {                        GiGoldPay.cancleLock(getInserCharLock);                    }                },                "onError": function (data) {                    GiGoldPay.cancleLock(getInserCharLock);                }            });        }    };    //获取测试用例信息 invalid    intInfoInit.prototype.updateUseCase = function (obj) {        if (!useCaseLock) {            useCaseLock = true;            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit() + "/autotest/getifsysmockbyifid.do",                "data": obj.data || {},                "onSuccess": function (data) {                    if (data.rspCd == "00000") {                        var interFaceArray = data.interFaceInfo,                            inteFaceNum = interFaceArray.mockList ? interFaceArray.mockList.length : 0,                            inteFaceHtml = '';                        //将用例具体信息缓存                        cacheDetail.push(interFaceArray);                        for (var i = 0; i < inteFaceNum; i++) {                            inteFaceHtml += '<p interFaceId=' + interFaceArray.mockList[i].ifId + ' caseId=' + interFaceArray.mockList[i].id + ' title=' + interFaceArray.mockList[i].caseName + '>' + interFaceArray.mockList[i].caseName + '</p>';                        }                        obj.parentDom.find('.num').html('(' + data.interFaceInfo.mockList.length + ')');                        obj.parentDom.next('.ct-box').toggleClass('ht-auto').html(inteFaceHtml);                        useCaseLock = false;                    } else {                        GiGoldPay.cancleLock(useCaseLock);                    }                },                'onError': function (data) {                    GiGoldPay.cancleLock(useCaseLock);                }            });        }    };    //获取下一页或者上一页内容    intInfoInit.prototype.updateInterfaceByPage = function (page) {        if (page) {            sliderInterface.cleanCache();            sliderInterface.cleanCaseDome();            $('#hdLeftBox').empty();            sliderInterface.updateInterface({                data: {                    ifName: "",                    ifSysId: $slider.find('.chooseSysVal').attr('sysid') || 0,                    pageNum: page - 0,                    ifProId: $slider.find('.chooseProVal').attr('proid') || 0                }            });        }    };    //获取报文依赖关系 invalid    intInfoInit.prototype.upateModule = function (obj) {        if (!moduleLock) {            moduleLock = true;            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit() + "/autotest/queryFieldRefer.do",                "data": obj.data || {},                "onSuccess": function (data) {                    if (data.rspCd == "00000") {                        moduleLock = false;                        var tempData = data;                        //waring不推荐这种方式 嵌套取依赖接口信息start                        if (!moduleNameLock) {                            obj.data.mockId = obj.data.mockid;                            GiGoldPay.ajaxHandler({                                "url": obj.url || GiGoldPay.ipBullShit() + "/getreferList.do",                                "data": obj.data || {},                                "onSuccess": function (_data) {                                    if (_data.rspCd == "00000") {                                        moduleNameLock = false;                                        //拼接已勾选依赖名                                        for (var i = 0, len = data.list.length; i < len; i++) {                                            for (var j = 0, _len = _data.list.length; j < _len; j++) {                                                if (data.list[i].ref_mock_id == _data.list[j].refMockId) {                                                    data.list[i].relateName = _data.list[j].ifName;                                                    break;                                                }                                            }                                        }                                        tempData.moduleList = _data.list;                                        //渲染报文依赖                                        var moduleContent = template('msgContent', tempData);                                        document.getElementById('msgModule').innerHTML = moduleContent;                                        //渲染接口依赖                                        var html = template('interfaceModule', _data);                                        document.getElementById('interfaceModuleCt').innerHTML = html;                                    } else {                                        GiGoldPay.cancleLock(moduleNameLock);                                    }                                },                                "onError": function (data) {                                    GiGoldPay.cancleLock(moduleNameLock);                                }                            });                        }                        //嵌套取依赖接口信息end                    } else {                        GiGoldPay.cancleLock(moduleLock);                    }                },                'onError': function (data) {                    GiGoldPay.cancleLock(moduleLock);                }            });        }    };    //获取用例信息    intInfoInit.prototype.getCaseData = function (obj) {        if (!caseDataLock) {            caseDataLock = true;            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit() + "/autotest/getMockById.do",                "data": obj.data || {},                "onSuccess": function (_data) {                    if (_data.rspCd == "00000") {                        caseDataLock = false;                        //拼接已勾选依赖名                        for (var i = 0, len = _data.mockFieldReferList.length; i < len; i++) {                            for (var j = 0, _len = _data.mockReferList.length; j < _len; j++) {                                if (_data.mockFieldReferList[i].ref_mock_id == _data.mockReferList[j].refMockId) {                                    _data.mockFieldReferList[i].relateName = _data.mockReferList[j].ifName;                                    break;                                }                            }                        }                        _data.moduleList = _data.mockReferList;                        //更新用例操作                        if (obj.data.type === 'update' && obj.data.respondCode) {                            var temp = obj.data.respondCode;                            var str = '<button type="button" class="btn btn-default dropdown-toggle chooseUpdateCode" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">请选择响应吗&nbsp;<span class="caret"></span></button>';                            for (var i = 0, len = temp.length; i < len; i++) {                                if (_data.mock.rspCodeId == temp[i].id) {                                    str = '<button type="button" class="btn btn-default dropdown-toggle chooseUpdateCode" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" sysid=' + temp[i].ifId + '>' + temp[i].rspCode + '&nbsp;&nbsp;' + temp[i].rspCodeDesc + '&nbsp;<span class="caret" ></span></button>';                                    break;                                }                            }                            var ul = '<ul class="dropdown-menu chooseUpdateCodeList">' +                                '{{ each data as temp i}}' +                                '<li><a href="javascript:;" rspCodeId="{{temp.id}}">{{temp.rspCode}}&nbsp;&nbsp;{{temp.rspCodeDesc}}</a></li>' +                                '{{/each}}' +                                '</ul>';                            var render = template.compile(ul);                            var ulHtml = render({                                data: temp                            });                            //渲染更新用例信息弹层                            var rendeUpdateLayer = '<div id="updateCaseBox" style="margin: 20px 10px 0;">' +                                '<div class="form-group">' +                                '<label for="caseName">用例名: </label>' +                                '<input type="text" class="form-control" value=' + _data.mock.caseName + '>' +                                '</div><div class="btn-group">' + str + ulHtml +                                '<button id="updateCaseSave" ifId=' + _data.mock.ifId + ' caseId=' + _data.mock.id + ' type="button" class="btn btn-success" style="margin-left: 10px;">保存</button>' +                                '</div></div>';                            layer.open({                                type: 1,                                title: '修改用例信息',                                closeBtn: 1, //不显示关闭按钮                                shift: 2,                                area: ['400px', '300px'],                                shadeClose: true, //开启遮罩关闭                                content: rendeUpdateLayer                            });                            return false;                        }                        //渲染报文依赖                        var moduleContent = template('msgContent', _data);                        document.getElementById('msgModule').innerHTML = moduleContent;//                        //渲染接口依赖//                        var html = template('interfaceModule', _data);//                        document.getElementById('interfaceModuleCt').innerHTML = html;                        try{                            GiGoldTool.rendReferGraph("#relaysGraph",_data,gotoCase);                        }catch(e){                            console.log(e)                        }                        _data.mock.getConstFields = getConstFields;                        //渲染请求头模版                        var reqArea = template('reqArea', _data.mock);                        document.getElementById('require').innerHTML = reqArea;                        //渲染响应头模版                        //var resArea = template('resArea', _data.mock);                        //document.getElementById('response').innerHTML = resArea;                        //渲染用例信息                        if(_data.mock.tmSmp){                            _data.mock.tmSmp = _data.mock.tmSmp.substr(0, _data.mock.tmSmp.length - 2);                            var caseArea = template('useCaseListBox', _data.mock);                            document.getElementById('useCaseList').innerHTML = caseArea;                        }                        //json格式化                        GiGoldTool.jsonBeautify(document.getElementById('resJsonBox'));                        GiGoldTool.jsonBeautify(document.getElementById('reqJsonBox'));                        //请求头格式化                        GiGoldTool.headBeautify("#realReq");                        GiGoldTool.headBeautify("#realRes");                        sliderInterface.getSqlData({                            data:{                                mockId: obj.data.id - 0                            }                        });                        sliderInterface.getSqlRetData({                            data:{                                mockId: obj.data.id - 0                            }                        });                        sliderInterface.getHisstorRetData({                            data:{                                ifId: obj.data.interfaceId || _data.mock.ifId                            }                        });                        sliderInterface.getDeclareData({                            data:{                                mockId: obj.data.id - 0                            }                        });                    } else {                        GiGoldPay.cancleLock(caseDataLock);                    }                },                "onError": function (data) {                    GiGoldPay.cancleLock(caseDataLock);                }            });        }    };    //获取用例SQL信息    intInfoInit.prototype.getSqlData = function (obj) {            GiGoldPay.ajaxHandler({                "url": obj.url || GiGoldPay.ipBullShit()+"/autotest/getCallBackSQLResulte.do",                "data": obj.data||{},                "onSuccess":function(data) {                    if (data.rspCd == "00000") {                        if(data.dataes.length <= 0 ||data.dataes == null){                            document.getElementById('refTitleModuleBox').innerHTML = "";                            document.getElementById('refOutModuleBox').innerHTML = "";                            document.getElementById('actuModuleBox').innerHTML = "";                            document.getElementById('actuSenModuleBox').innerHTML = "";                             return false;                        }                        var newResu = $.parseJSON(data.dataes[0].new.resulte);                        var oldResu = $.parseJSON(data.dataes[0].old.resulte);                        var refTitlelist = {},                            actuTitlelist = {};                        if(newResu == null || newResu == "" || newResu == "0"){                            document.getElementById('refTitleModuleBox').innerHTML = "";                            document.getElementById('refOutModuleBox').innerHTML = "";                        }else{                            refTitlelist = newResu[0];                        }                        if(oldResu == null || oldResu == "" || oldResu == "0"){                            document.getElementById('actuModuleBox').innerHTML = "";                            document.getElementById('actuSenModuleBox').innerHTML = "";                        }else{                            actuTitlelist = oldResu[0];                        }                        var newResuObj = {                            refTitlelist: refTitlelist,                            refOutList:newResu                        };                        var oldResuObj = {                            actuTitlelist: actuTitlelist,                            actuOutList:oldResu                        }                        var refTitleHtml = template('refTitleModule',newResuObj );                        document.getElementById('refTitleModuleBox').innerHTML = refTitleHtml;                        var refOutHtml = template('refOutModule', newResuObj);                        document.getElementById('refOutModuleBox').innerHTML = refOutHtml;                        var actuTitleHtml = template('actuModule',oldResuObj );                        document.getElementById('actuModuleBox').innerHTML = actuTitleHtml;                        var actuOutHtml = template('actuSenModule', oldResuObj);                        document.getElementById('actuSenModuleBox').innerHTML = actuOutHtml;                        var actuSenData = {actuSenData:{}};                        actuSenData.actuSenData.mew = data.dataes[0].new;                        actuSenData.actuSenData.old = data.dataes[0].old;                        var actuSenHtml = template('actuSenModel', actuSenData);                        document.getElementById('actuSenBox').innerHTML = actuSenHtml;                        var leftTbTrTds = $("#sqlBotLeft").find("tbody tr").eq(1).find("td");                        var leftThTrTds = $("#sqlBotLeft").find("thead tr").find("td");                        var rightTbTrTds = $("#sqlBotRight").find("tbody tr").eq(1).find("td");                        var rightThTrTds = $("#sqlBotRight").find("thead tr").find("td");                        //获取tbody td高度                        $(leftTbTrTds).each(function(index,ele){                            var _width = $(ele).width();                            $(leftThTrTds[index]).width(_width);                        });                        $(rightTbTrTds).each(function(index,ele){                            var _width = $(ele).width();                            $(rightThTrTds[index]).width(_width);                        });                    }else{                        document.getElementById('refTitleModuleBox').innerHTML = "";                        document.getElementById('refOutModuleBox').innerHTML = "";                        document.getElementById('actuModuleBox').innerHTML = "";                        document.getElementById('actuSenModuleBox').innerHTML = "";                        layer.msg(data.rspInf);                    }                },                "onError":function(data) {                    layer.msg(data.rspInf);                }            });    }    //获取用例SQL检索信息    intInfoInit.prototype.getSqlRetData = function (obj) {        GiGoldPay.ajaxHandler({            "url": obj.url || GiGoldPay.ipBullShit()+"/autotest/getCallBackSQL.do",            "data": obj.data||{},            "onSuccess":function(data) {                if (data.rspCd == "00000") {                    var html = template('dBOptionsModel', data);                    document.getElementById('dBOptionsBox').innerHTML = html;                    if(data.ifSysSQLCallBack){                        document.getElementById('selectArea').innerHTML = data.ifSysSQLCallBack.sql;                    }                }            },            "onError":function(data) {                layer.msg(data.rspInf);            }        });    };    //获取用例断言规则信息    intInfoInit.prototype.getDeclareData = function (obj) {        GiGoldPay.ajaxHandler({            "url": obj.url || GiGoldPay.ipBullShit()+"/autotest/getAssertRulesByMockId.do",            "data": obj.data||{},            "onSuccess":function(data) {                if (data.rspCd == "00000") {                    //渲染断言规则模版                    data.assertRules.mockId = obj.data.mockId;                    var resArea = template('resArea', data);                    document.getElementById('response').innerHTML = resArea;                    if(data.assertRules && data.assertRules.length > 0){                        var assertRules = data.assertRules[0];                        var $asObj = $('.declareObj');                        if( assertRules.asClass && ( assertRules.asClass == "HEADERS" || assertRules.asClass == "JSON" ) ){                            $asObj.show();                        }else{                            $asObj.hide();                        }                    }                }            },            "onError":function(data) {                layer.msg(data.rspInf);            }        });    };    //获取接口返回过的历史返回码信息    intInfoInit.prototype.getHisstorRetData = function (obj) {        GiGoldPay.ajaxHandler({            "url": obj.url || GiGoldPay.ipBullShit()+"/autotest/getHistoricalReturnCode.do",            "data": obj.data||{},            "onSuccess":function(data) {                if (data.rspCd == "00000") {                    var html = template('baseInterfaceTab', data);                    $("#hdLeftBox").find(".panelBodyBox").append(html);                }else{                    layer.msg(data.rspInf);                }            },            "onError":function(data) {                layer.msg(data.rspInf);            }        });    };    //暴露缓存数据    intInfoInit.prototype.interfaceDataCache = interfaceDataCache;    //清除缓存数据    intInfoInit.prototype.cleanCache = function () {        cacheDetail = [];        interfaceDataCache = [];    };    //接口列表信息模板渲染    function renderByJson(data) {        var interfaceHtml = '<ul class="interfaceList">' +            '{{ each data.list as obj i}}' +            '<li class="interfaceChild " ifId="{{obj.id}}">' +            '<div class="interfaceMsg">' +            '<div class="id">{{obj.id}}</div>' +            '<p class="msg" title="{{obj.ifName}}">{{obj.ifName}}' +                '<i class="ignore-flag" style="display:{{obj.autoTest=="Y"?"none":"auto"}}" title="ignore 忽略自动测试">Ig</i>' +            '</p>' +            '<div class="num">({{obj.mockidList.length}})</div>' +            '<i class="add-case iconfont">&#xe602;</i>' +            '<i class="switch-test" style="background:#607D8B"><=></i>' +            '</div>' +            '<div class="ct-box">' +            '{{each obj.mockidList as temp j}}' +            '<p interFaceId={{obj.id}} caseId={{temp.id}} title={{temp.caseName}}><span class="color_25AEB3">{{temp.id}}</span><label>{{temp.caseName}}</label><i class="update-case iconfont">&#xe605;</i><i class="del-case iconfont">&#xe606;</i></p>' +            '{{/each}}' +            '</div>' +            '</li>' +            '{{/each}}' +            '</ul>' +            '<div id="pageBox">' +            '{{ if data.hasPreviousPage}}' +            '<button type="button" class="prePage nextUpBtn" title="上一页" page="{{data.prePage}}">上一页</button>' +            '{{ else if !data.hasPreviousPage}}' +            '<button type="button" class="prePage firstLastBtn " disabled="disabled" title="初始页">初始页</button>' +            '{{/if}}' +            '<div class="fl curPage"><span>{{data.pageNum}}</span>/<span>{{data.pages}}</span></div>' +            '{{ if data.hasNextPage}}' +            '<button type="button" class="nextPage nextUpBtn" title="下一页" page="{{data.nextPage}}">下一页</button>' +            '{{ else if !data.hasNextPage}}' +            '<button type="button" class="nextPage firstLastBtn"  disabled="disabled" title="最末页">最末页</button>' +            '{{/if}}' +            '</div>';        var render = template.compile(interfaceHtml);        var html = render({            data: data        });        document.getElementById('interfaceInfo').innerHTML = html;    }    //接口基本信息,响应吗信息渲染    function renderBaseInterfaceAndRes(data) {        var html = template('baseInterfaceRes', data);        document.getElementById('hdLeftBox').innerHTML = html;    }    //左侧侧栏接口列表初始化    var sliderInterface = new intInfoInit();    sliderInterface.updateInterface({        'data': {            ifName: "",            ifProId: GiGoldTool.cookie('proid') || 0,            ifSysId: GiGoldTool.cookie('sysid') || 0,            pageNum: GiGoldTool.cookie('pagenum') || 0        }    })    //暴露接口,以供后续局部刷新    module.exports = {        intInfoInit: intInfoInit    };});